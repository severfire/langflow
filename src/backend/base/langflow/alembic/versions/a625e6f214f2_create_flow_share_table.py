"""Create flow_share table

Revision ID: a625e6f214f2
Revises: c680118ad20f
Create Date: 2025-02-07 15:56:48.714225

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.engine.reflection import Inspector
from langflow.utils import migration


# revision identifiers, used by Alembic.
revision: str = "a625e6f214f2"
down_revision: Union[str, None] = "c680118ad20f"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)  # type: ignore
    existing_tables = inspector.get_table_names()

    if "flow_shared" not in existing_tables:
        # ### commands auto generated by Alembic - please adjust! ###
        op.create_table(
            "flow_shared",
                sa.Column("id", sqlmodel.sql.sqltypes.types.Uuid(), nullable=False, primary_key=True, unique=True),
                sa.Column("flow_id", sqlmodel.sql.sqltypes.types.Uuid(), nullable=False),
                sa.Column("user_id", sqlmodel.sql.sqltypes.types.Uuid(), nullable=False),
                sa.Column("is_active", sa.Boolean(), nullable=False),
                sa.Column("access_edit", sa.Boolean(), nullable=False),
                sa.Column("access_view", sa.Boolean(), nullable=False),
                sa.Column("access_chat", sa.Boolean(), nullable=False),
                sa.Column("created_at", sa.DateTime(), nullable=False),
                sa.Column("updated_at", sa.DateTime(), nullable=False),
                sa.ForeignKeyConstraint(["flow_id"], ["flow.id"], name="fk_flow_shared_flow_id_flow"),
                sa.ForeignKeyConstraint(["user_id"], ["user.id"], name="fk_flow_shared_user_id_user"),
                sa.PrimaryKeyConstraint("id", name="pk_flow_shared"),
                sa.UniqueConstraint("id", name="uq_flow_shared_id"),
                sa.UniqueConstraint("user_id", "flow_id", name="uq_flow_shared_per_user")
        )
        with op.batch_alter_table("flow_shared", schema=None) as batch_op:
            batch_op.create_index(batch_op.f("ix_flow_shared_flow_id"), ["flow_id"], unique=False)
            batch_op.create_index(batch_op.f("ix_flow_shared_user_id"), ["user_id"], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    conn = op.get_bind()
    inspector = sa.inspect(conn)  # type: ignore
    existing_tables = inspector.get_table_names()

    if "flow_shared" in existing_tables:
        # ### commands auto generated by Alembic - please adjust! ###
        op.drop_table("flow_shared")
        # ### end Alembic commands ###
